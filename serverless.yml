service: gettogether

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs10.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}
  tracing: true
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource: '*'
  environment:
    service: ${self:service}-${self:provider.stage}

package:
  exclude: 
    - cloudwatch-logs-to-logzio/**
    - tests/**

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName: ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}
  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-joingettogetherdlq
  notifyOrganiserDLQSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}

functions:
  getGetTogethers:
    handler: src/functions/getGetTogethers.handler
    events:
      - http:
          path: api/getTogethers
          method: get
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*
    environment:
      getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName
      functionShieldToken: 'dmdhbHRlc0BnbWFpbC5jb20AMEUCIGK9gu7R0H95YMZ/KUDldUNOcpoDWc1wFyWbgNZv2UUPAiEA6CqVHPIdbCsdRavMu86+T3P3I4aqeb11pPdfRwZcBUk='

  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
    onError: ${self:custom.notifyOrganiserDLQSnsTopic}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.notifyOrganiserDLQSnsTopic}

  notifyOrganiserDLQ:
    handler: src/functions/notifyOrganiserDLQ.handler
    events:
      - sns: ${self:custom.notifyOrganiserDLQSnsTopic}

  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopic}

resources:
  Transform: AWS::Serverless-2016-10-31
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    DeadLetterQueue:
      Type: AWS::SNS::Topic
      Properties : 
         TopicName : ${self:custom.notifyOrganiserDLQSnsTopicName}
